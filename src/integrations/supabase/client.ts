
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { TableCheckResult, callRPC } from './helpers';

const SUPABASE_URL = "https://zghthguqsravpcvrgahe.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpnaHRoZ3Vxc3JhdnBjdnJnYWhlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ4MzkxNTQsImV4cCI6MjA2MDQxNTE1NH0.1NaMBtnpxGksfayFK3Pul6_UUcDAFalSUdXWgppkUbw";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storageKey: 'business-manager-auth',
  },
  db: {
    schema: 'public',
  },
  global: {
    headers: { 'x-app-version': '1.0.0' }
  }
});

// Define valid table names as constants for type safety
export const Tables = {
  PROFILES: 'profiles',
  DEPARTMENTS: 'departments', 
  MANAGERS: 'managers',
  DIAGNOSTIC_TESTS: 'diagnostic_tests'
} as const;

// Type for table names (for type safety)
export type ValidTableName = typeof Tables[keyof typeof Tables];

// Basic connection test function
export const testSupabaseConnection = async (): Promise<{success: boolean; message: string; responseTime?: number}> => {
  try {
    console.log('Testing Supabase connection...');
    const startTime = performance.now();
    
    // Use a simpler query to test the connection
    const { data, error } = await callRPC('postgres_version');
    
    const responseTime = Math.round(performance.now() - startTime);
    
    if (error) {
      console.error('Supabase connection error:', error);
      return {
        success: false,
        message: `Connection error: ${error.message || 'Unknown error'}`,
      };
    }
    
    console.log(`Supabase connection successful (${responseTime}ms)`);
    return {
      success: true,
      message: `Connected successfully in ${responseTime}ms`,
      responseTime
    };
  } catch (error) {
    console.error('Supabase connection test failed:', error);
    return {
      success: false,
      message: error instanceof Error ? error.message : 'Unknown connection error',
    };
  }
};

// Check database tables function with improved type safety
export const checkDatabaseTables = async (): Promise<{[tableName: string]: {exists: boolean; count?: number; error?: string}}> => {
  const tablesToCheck = [
    Tables.PROFILES,
    Tables.DEPARTMENTS,
    Tables.MANAGERS,
    Tables.DIAGNOSTIC_TESTS
  ];
  
  const results: {[tableName: string]: {exists: boolean; count?: number; error?: string}} = {};
  
  for (const tableName of tablesToCheck) {
    try {
      console.log(`Checking table: ${tableName}`);
      
      // Use the RPC function to check table existence
      const { data, error } = await callRPC('check_table_exists_and_count', {
        table_name: tableName
      });
      
      if (error) {
        console.error(`Error checking table ${tableName}:`, error);
        results[tableName] = { 
          exists: false, 
          error: error.message 
        };
        continue;
      }
      
      if (data) {
        results[tableName] = { 
          exists: data.exists === true, 
          count: data.count || 0
        };
      } else {
        results[tableName] = {
          exists: false,
          error: 'Invalid response format'
        };
      }
    } catch (error) {
      console.error(`Error checking table ${tableName}:`, error);
      results[tableName] = { 
        exists: false, 
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }
  
  console.log('Database tables check results:', results);
  return results;
};
