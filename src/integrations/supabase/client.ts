
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wjuzzjitpkhjjxujxftm.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndqdXp6aml0cGtoamp4dWp4ZnRtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUzNDY0ODcsImV4cCI6MjA2MDkyMjQ4N30.AxEUABuJzJaTQ9GZryiAfOkmHRBReYw4M798E_Z43Qc";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Test the connection to Supabase
export const testSupabaseConnection = async (): Promise<{success: boolean; message: string; responseTime?: number}> => {
  const startTime = performance.now();
  try {
    // Use a simple query to test connection - bypass typing issues with casting
    const { data, error } = await supabase.rpc('postgres_version') as {
      data: any;
      error: any;
    };
    
    if (error) throw error;
    
    return {
      success: true,
      message: "Connection established successfully",
      responseTime: Math.round(performance.now() - startTime)
    };
  } catch (error: any) {
    console.error('Connection test failed:', error);
    return {
      success: false,
      message: error?.message || "Unknown connection error",
      responseTime: Math.round(performance.now() - startTime)
    };
  }
};

// Check if database tables exist and get row counts
export const checkDatabaseTables = async (): Promise<{[tableName: string]: {exists: boolean; count?: number; error?: string}}> => {
  const result: {[tableName: string]: {exists: boolean; count?: number; error?: string}} = {};
  
  // Get list of all tables
  try {
    // We need to bypass the type system for this query since our Database type doesn't define these tables
    const response = await supabase.from('information_schema.tables').select('table_name').eq('table_schema', 'public') as unknown as {
      data: Array<{table_name: string}> | null;
      error: any;
    };
    
    const { data: tables, error } = response;
    
    if (error) {
      console.error('Error fetching tables:', error);
      return { error: { exists: false, error: error.message } };
    }
    
    // Check each known table
    for (const table of tables || []) {
      try {
        // Call the function to check if table exists and get count
        const { data, error } = await supabase.rpc('check_table_exists_and_count', { 
          table_name: table.table_name 
        }) as unknown as {
          data: { exists: boolean; count: number } | null;
          error: any;
        };
        
        if (error) {
          result[table.table_name] = { exists: false, error: error.message };
        } else if (data) {
          result[table.table_name] = { 
            exists: data.exists, 
            count: data.exists ? data.count : undefined 
          };
        }
      } catch (error: any) {
        result[table.table_name] = { 
          exists: false, 
          error: error?.message || "Error checking table" 
        };
      }
    }
    
    return result;
  } catch (error: any) {
    console.error('Error checking database tables:', error);
    return { error: { exists: false, error: error?.message || "Unknown error" } };
  }
};
